{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/searchCharForm/SearchCharForm.js","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","process","setProcess","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getCharacterByName","name","res","_transformCharacter","results","getAllCharacters","_ref2","_callee2","offset","_args2","_context2","map","getCharacter","_ref3","_callee3","id","_context3","_x2","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton","_jsxs","_Fragment","children","className","setContent","Component","Spinner","View","imgStyles","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","props","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","setOffset","_useState7","_useState8","charEnded","setCharEnded","onUpdateChars","initial","onCharsLoaded","newChar","ended","_toConsumableArray","itemsRef","useRef","setActiveRef","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onKeyDown","e","key","onCharSelected","TransitionGroup","component","renderItems","disabled","CharInfo","charId","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","error","_createClass","value","errorInfo","this","setState","SearchCharForm","setError","onCharError","success","Link","to","fail","Formik","initialValues","validationSchema","Yup","required","onSubmit","catch","searchChar","Form","htmlFor","Field","type","placeholder","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/6.6b810e6c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return(\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"Error\"/>\r\n    )\r\n}\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=7059553904227b4ac1aafd367810f27f';\r\n    const _baseOffset = 210;\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items,\r\n        }\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\"\r\n        }\r\n    }\r\n\r\n    \r\n    return {process, \r\n            setProcess,\r\n            getAllCharacters, \r\n            getCharacter, \r\n            clearError, \r\n            getAllComics, \r\n            getComic, \r\n            getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            \r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n\r\n\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch(process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error': \r\n            return <ErrorMessage/>;\r\n        default: \r\n            throw new Error('Unexpected process state');\r\n\r\n    }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\n\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n\n    const imgStyles = thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ? {objectFit: 'contain'} : null;\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} style={imgStyles} alt=\"Random character\" className=\"randomchar__img\"/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch(process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error': \n            return <ErrorMessage/>;\n        default: \n            throw new Error('Unexpected process state');\n\n    }\n}\n\nconst CharList = (props) => {\n    const [char, setChar] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onUpdateChars(offset, true);\n    }, [])\n\n    const onUpdateChars = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharsLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharsLoaded = (newChar) => {\n        let ended = false;\n        if(newChar.length < 9) {\n            ended = true;\n        }\n\n        setChar(char => [...char, ...newChar]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended)\n    }\n\n    const itemsRef = useRef([]);\n\n    const setActiveRef = (id) => {\n        itemsRef.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemsRef.current[id].classList.add('char__item_selected');\n        itemsRef.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map(({name, thumbnail, id}, i) => {\n            let imgStyles = thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ? {objectFit: 'unset'} : null;\n\n            return (\n                <CSSTransition key={id} timeout={500} classNames=\"char__item\">\n                    <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemsRef.current[i] = el}\n                    key={id}\n                    onKeyDown={(e) => {\n                        if(e.key === ' ' || e.key === 'Enter'){\n                            props.onCharSelected(id);\n                            setActiveRef(i)\n                        }\n                    }\n\n                    }\n                    onClick={() => {\n                        props.onCharSelected(id);\n                        setActiveRef(i)\n                    \n                    }}>\n                        <img src={thumbnail}  style={imgStyles} alt={name}/>\n                        <div className=\"char__name\">{name}</div>\n                    </li>\n                </CSSTransition>\n            )\n            \n        })\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(char), newItemLoading);\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button className=\"button button__main button__long\" \n            disabled={newItemLoading}\n            style={{'display': charEnded ? 'none' : 'block'}}>\n                <div className=\"inner\" onClick={() => onUpdateChars(offset)}>load more</div>\n            </button>\n        </div>\n    )\n}\n\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const {charId} = props;\n        if(!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n \n    \n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div> \n    )\n}\n\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    const imgStyles = thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ? {objectFit: 'contain'} : null;\n    return(\n        <>\n        <div className=\"char__basics\">\n            <img src={thumbnail} alt={name} style={imgStyles}/>\n            <div>\n                <div className=\"char__info-name\">{name}</div>\n                <div className=\"char__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n        <div className=\"char__descr\">\n            {description}\n        </div>\n        <div className=\"char__comics\">Comics:</div>\n        <ul className=\"char__comics-list\">\n            {comics.length > 0 ? null : 'There is no comics with this character'}\n            {\n                comics.slice(0, 10).map((item, i) => {\n                    return (\n                        <li key={i} className=\"char__comics-item\">\n                            {!item.name ? <p>No</p> : item.name}                            \n                        </li>\n                    )        \n                })\n            }\n        </ul>\n        \n        </>\n    )\n}\n\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\nexport default CharInfo;","import { Component } from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component{\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport './searchCharForm.scss';\r\n\r\nconst SearchCharForm = () => {\r\n    const [char, setChar] = useState('');\r\n    const [error, setError] = useState(false);\r\n\r\n    const {getCharacterByName} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const onCharError = () => {\r\n        setError(true);\r\n    }\r\n\r\n    const searchChar = (name) => {\r\n        setError(false);\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .catch(onCharError)\r\n    }\r\n\r\n    const success = !char.name ? null : \r\n                    <div className='form__wrapper-success'>\r\n                        <p className='success'>There is! Visit {char.name} page?</p>\r\n                        <Link to={`/char/${char.id}`} className=\"form__btn button button__secondary\">\r\n                            <div className=\"inner\">TO PAGE</div>\r\n                        </Link>\r\n                    </div>\r\n    const fail = !char.name && error ? <p className='error'>The character was not found. Check the name and try again</p> : null;\r\n\r\n    return (\r\n        <Formik\r\n        initialValues = {{\r\n            name: ''\r\n        }}\r\n        validationSchema = {Yup.object({\r\n            name: Yup.string().required('This field is required')\r\n        })}\r\n        onSubmit = { ({name}) => {\r\n            searchChar(name);\r\n        }}\r\n        >\r\n            <Form className='form'>\r\n                <label htmlFor=\"text\" className='form__title'>Or find a character by name:</label>\r\n                <div className=\"form__wrapper\">\r\n                    <Field type=\"text\" \r\n                            name='name' \r\n                            id='name' \r\n                            className='form__input' \r\n                            placeholder='Enter name'/>\r\n                    <button type=\"submit\" className=\"form__btn button button__main\">\r\n                            <div className=\"inner\">FIND</div>\r\n                    </button>\r\n                </div>\r\n                <ErrorMessage component=\"div\" className=\"error\" name=\"name\" />\r\n                {success}\r\n                {fail}\r\n            </Form>\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default SearchCharForm;\r\n","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\nimport SearchCharForm from \"../searchCharForm/SearchCharForm\";\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                    />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <SearchCharForm/>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}